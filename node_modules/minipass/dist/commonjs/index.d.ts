/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { EventEmitter } from 'events';
import { StringDecoder } from 'string_decoder';
/**
 * Same as StringDecoder, but exposing the `lastNeed` flag on the type
 */
type SD = StringDecoder & {
    lastNeed: boolean;
};
export type { SD, Pipe, PipeProxyErrors };
/**
 * Return true if the argument is a Minipass stream, Node stream, or something
 * else that Minipass can interact with.
 */
export declare const isStream: (s: any) => s is NodeJS.WriteStream | NodeJS.ReadStream | Minipass<any, any, any> | (NodeJS.ReadStream & {
    fd: number;
}) | (EventEmitter & {
    pause(): any;
    resume(): any;
    pipe(...destArgs: any[]): any;
}) | (NodeJS.WriteStream & {
    fd: number;
}) | (EventEmitter & {
    end(): any;
    write(chunk: any, ...args: any[]): any;
});
/**
 * Return true if the argument is a valid {@link Minipass.Readable}
 */
export declare const isReadable: (s: any) => s is Minipass.Readable;
/**
 * Return true if the argument is a valid {@link Minipass.Writable}
 */
export declare const isWritable: (s: any) => s is Minipass.Readable;
declare const EOF: unique symbol;
declare const MAYBE_EMIT_END: unique symbol;
declare const EMITTED_END: unique symbol;
declare const EMITTING_END: unique symbol;
declare const EMITTED_ERROR: unique symbol;
declare const CLOSED: unique symbol;
declare const READ: unique symbol;
declare const FLUSH: unique symbol;
declare const FLUSHCHUNK: unique symbol;
declare const ENCODING: unique symbol;
declare const DECODER: unique symbol;
declare const FLOWING: unique symbol;
declare const PAUSED: unique symbol;
declare const RESUME: unique symbol;
declare const BUFFER: unique symbol;
declare const PIPES: unique symbol;
declare const BUFFERLENGTH: unique symbol;
declare const BUFFERPUSH: unique symbol;
declare const BUFFERSHIFT: unique symbol;
declare const OBJECTMODE: unique symbol;
declare const DESTROYED: unique symbol;
declare const ERROR: unique symbol;
declare const EMITDATA: unique symbol;
declare const EMITEND: unique symbol;
declare const EMITEND2: unique symbol;
declare const ASYNC: unique symbol;
declare const ABORT: unique symbol;
declare const ABORTED: unique symbol;
declare const SIGNAL: unique symbol;
declare const DATALISTENERS: unique symbol;
declare const DISCARDED: unique symbol;
/**
 * Options that may be passed to stream.pipe()
 */
export interface PipeOptions {
    /**
     * end the destination stream when the source stream ends
     */
    end?: boolean;
    /**
     * proxy errors from the source stream to the destination stream
     */
    proxyErrors?: boolean;
}
/**
 * Internal class representing a pipe to a destination stream.
 *
 * @internal
 */
declare class Pipe<T extends unknown> {
    src: Minipass<T>;
    dest: Minipass<any, T>;
    opts: PipeOptions;
    ondrain: () => any;
    constructor(src: Minipass<T>, dest: Minipass.Writable, opts: PipeOptions);
    unpipe(): void;
    proxyErrors(_er: any): void;
    end(): void;
}
/**
 * Internal class representing a pipe to a destination stream where
 * errors are proxied.
 *
 * @internal
 */
declare class PipeProxyErrors<T> extends Pipe<T> {
    unpipe(): void;
    constructor(src: Minipass<T>, dest: Minipass.Writable, opts: PipeOptions);
}
export declare namespace Minipass {
    /**
     * Encoding used to create a stream that outputs strings rather than
     * Buffer objects.
     */
    export type Encoding = BufferEncoding | 'buffer' | null;
    /**
     * Any stream that Minipass can pipe into
     */
    export type Writable = Minipass<any, any, any> | NodeJS.WriteStream | (NodeJS.WriteStream & {
        fd: number;
    }) | (EventEmitter & {
        end(): any;
        write(chunk: any, ...args: any[]): any;
    });
    /**
     * Any stream that can be read from
     */
    export type Readable = Minipass<any, any, any> | NodeJS.ReadStream | (NodeJS.ReadStream & {
        fd: number;
    }) | (EventEmitter & {
        pause(): any;
        resume(): any;
        pipe(...destArgs: any[]): any;
    });
    /**
     * Utility type that can be iterated sync or async
     */
    export type DualIterable<T> = Iterable<T> & AsyncIterable<T>;
    type EventArguments = Record<string | symbol, unknown[]>;
    /**
     * The listing of events that a Minipass class can emit.
     * Extend this when extending the Minipass class, and pass as
     * the third template argument.  The key is the name of the event,
     * and the value is the argument list.
     *
     * Any undeclared events will still be allowed, but the handler will get
     * arguments as `unknown[]`.
     */
    export interface Events<RType extends any = Buffer> extends EventArguments {
        readable: [];
        data: [chunk: RType];
        error: [er: unknown];
        abort: [reason: unknown];
        drain: [];
        resume: [];
        end: [];
        finish: [];
        prefinish: [];
        close: [];
        [DESTROYED]: [er?: unknown];
        [ERROR]: [er: unknown];
    }
    /**
     * String or buffer-like data that can be joined and sliced
     */
    export type ContiguousData = Buffer | ArrayBufferLike | ArrayBufferView | string;
    export type BufferOrString = Buffer | string;
    /**
     * Options passed to the Minipass constructor.
     */
    export type SharedOptions = {
        /**
         * Defer all data emission and other events until the end of the
         * current tick, similar to Node core streams
         */
        async?: boolean;
        /**
         * A signal which will abort the stream
         */
        signal?: AbortSignal;
        /**
         * Output string encoding. Set to `null` or `'buffer'` (or omit) to
         * emit Buffer objects rather than strings.
         *
         * Conflicts with `objectMode`
         */
        encoding?: BufferEncoding | null | 'buffer';
        /**
         * Output data exactly as it was written, supporting non-buffer/string
         * data (such as arbitrary objects, falsey values, etc.)
         *
         * Conflicts with `encoding`
         */
        objectMode?: boolean;
    };
    /**
     * Options for a string encoded output
     */
    export type EncodingOptions = SharedOptions & {
        encoding: BufferEncoding;
        objectMode?: false;
    };
    /**
     * Options for contiguous data buffer output
     */
    export type BufferOptions = SharedOptions & {
        encoding?: null | 'buffer';
        objectMode?: false;
    };
    /**
     * Options for objectMode arbitrary output
     */
    export type ObjectModeOptions = SharedOptions & {
        objectMode: true;
        encoding?: null;
    };
    /**
     * Utility type to determine allowed options based on read type
     */
    export type Options<T> = T extends string ? EncodingOptions | ObjectModeOptions : T extends Buffer ? BufferOptions | ObjectModeOptions : SharedOptions;
    export {};
}
/**
 * Main export, the Minipass class
 *
 * `RType` is the type of data emitted, defaults to Buffer
 *
 * `WType` is the type of data to be written, if RType is buffer or string,
 * then any {@link Minipass.ContiguousData} is allowed.
 *
 * `Events` is the set of event handler signatures that this object
 * will emit, see {@link Minipass.Events}
 */
export declare class Minipass<RType extends unknown = Buffer, WType extends unknown = RType extends Minipass.BufferOrString ? Minipass.ContiguousData : RType, Events extends Minipass.Events<RType> = Minipass.Events<RType>> extends EventEmitter implements Minipass.DualIterable<RType> {
    [FLOWING]: boolean;
    [PAUSED]: boolean;
    [PIPES]: Pipe<RType>[];
    [BUFFER]: RType[];
    [OBJECTMODE]: boolean;
    [ENCODING]: BufferEncoding | null;
    [ASYNC]: boolean;
    [DECODER]: SD | null;
    [EOF]: boolean;
    [EMITTED_END]: boolean;
    [EMITTING_END]: boolean;
    [CLOSED]: boolean;
    [EMITTED_ERROR]: unknown;
    [BUFFERLENGTH]: number;
    [DESTROYED]: boolean;
    [SIGNAL]?: AbortSignal;
    [ABORTED]: boolean;
    [DATALISTENERS]: number;
    [DISCARDED]: boolean;
    /**
     * true if the stream can be written
     */
    writable 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv 0Ôv   d   Ô1Z2x22´2è2]3333§3»3Ñ3Ú35¥5®5·5À5ß5`6}6666¡6ª6³6¼6Å6Î6×6à6é6ò6û6777Ð7<8a8q888   Ð     66666666 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|666666666 6¤6¨6¬6°6´6¸6¼6À6Ä6È6Ì6Ð6Ô6Ø6Ü6à6ä6è6ì6ð6ô6ø6ü6 77777777 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|777777777 7¤7¨7¬7°7´7¸7¼7À7Ä7È7Ì7Ð7Ô7Ø7Ü7à7ä7è7ì7ð7ô7ø7ü7 88888888 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|888888888 8¤8¨8¬8°8´8¸8¼8À8Ä8È8Ì8Ð8Ô8Ø8Ü8à8ä8è8ì8ð8ô8ø8ü8 99999999 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|999999999 9¤9¨9¬9°9´9¸9¼9À9Ä9È9Ì9Ð9Ô9Ø9Ü9à9ä9è9ì9ð9ô9ø9ü9 :::::::: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|::::::::: :¤:¨:¬:°:´:¸:¼:À:Ä:È:Ì:Ð:Ô:Ø:Ü:à:ä:è:ì:ð:ô:ø:ü: ;;;;;;;; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;;;;;;;;; ;¤;¨;¬;°;´;¸;¼;À;Ä;È;Ì;Ð;Ô;Ø;Ü;à;ä;è;ì;ð;ô;ø;ü; <<<<<<<< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<<<<<<<<< <¤<¨<¬<°<´<¸<¼<À<Ä<È<Ì<Ð<Ô<Ø<Ü<à<ä<è<ì<ð<ô<ø<ü< ======== =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|========= =¤=¨=¬=°=´=¸=¼=À=Ä=È=Ì=Ð=Ô=Ø=Ü=à=ä=è=ì=ð=ô=ø=ü= >>>>>>>> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>>>>>>>>> >¤>¨>¬>°>´>¸>¼>À>Ä>È>Ì>Ð>Ô>Ø>Ü>à>ä>è>ì>ð>ô>ø>ü> ???????? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|????????? ?¤?¨?¬?°?´?¸?¼?À?Ä?È?Ì?Ð?Ô?Ø?Ü?à?ä?è?ì?ð?ô?ø?ü? à     00000000 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|000000000 0¤0¨0¬0°0´0¸0¼0À0Ä0È0Ì0Ð0Ô0Ø0Ü0à0ä0è0ì0ð0ô0ø0ü0 11111111 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|111111111 1¤1¨1¬1°1´1¸1¼1À1Ä1È1Ì1Ð1Ô1Ø1Ü1à1ä1è1ì1ð1ô1ø1ü1 22222222 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|222222222 2¤2¨2¬2°2´2¸2¼2À2Ä2È2Ì2Ð2Ô2Ø2Ü2à2ä2è2ì2ð2ô2ø2ü2 33333333 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|333333333 3¤3¨3¬3°3´3¸3¼3À3Ä3È3Ì3Ð3Ô3Ø3Ü3à3ä3è3ì3ð3ô3ø3ü3 44444444 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|444444444 4¤4¨4¬4°4´4¸4¼4À4Ä4È4Ì4Ð4Ô4Ø4Ü4à4ä4è4ì4ð4ô4ø4ü4 55555555 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|555555555 5¤5¨5¬5°5´5¸5¼5À5Ä5È5Ì5Ð5Ô5Ø5Ü5à5ä5è5ì5ð5ô5ø5ü5 66666666 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|666666666 6¤6¨6¬6°6´6¸6¼6À6Ä6È6Ì6Ð6Ô6Ø6Ü6à6ä6è6ì6ð6ô6ø6ü6 77777777 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|777777777 7¤7¨7¬7°7´7¸7¼7À7Ä7È7Ì7Ð7Ô7Ø7Ü7à7ä7è7ì7ð7ô7ø7ü7 88888888 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|888888888 8¤8¨8¬8°8´8¸8¼8À8Ä8È8Ì8Ð8Ô8Ø8Ü8à8ä8è8ì8ð8ô8ø8ü8 99999999 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|999999999 9¤9¨9¬9°9´9¸9¼9À9Ä9È9Ì9Ð9Ô9Ø9Ü9à9ä9è9ì9ð9ô9ø9ü9 :::::::: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|::::::::: :¤:¨:¬:°:´:¸:¼:À:Ä:È:Ì:Ð:Ô:Ø:Ü:à:ä:è:ì:ð:ô:ø:ü: ;;;;;;;; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;;;;;;;;; ;¤;¨;¬;°;´;¸;¼;À;Ä;È;Ì;Ð;Ô;Ø;Ü;à;ä;è;ì;ð;ô;ø;ü; <<<<<<<< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<<<<<<<<< <¤<¨<¬<°<´<¸<¼<À<Ä<È<Ì<Ð<Ô<Ø<Ü<à<ä<è<ì<ð<ô<ø<ü< ======== =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|========= =¤=¨=¬=°=´=¸=¼=À=Ä=È=Ì=Ð=Ô=Ø=Ü=à=ä=è=ì=ð=ô=ø=ü= >>>>>>>> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>>>>>>>>> >¤>¨>¬>°>´>¸>¼>À>Ä>È>Ì>Ð>Ô>Ø>Ü>à>ä>è>ì>ð>ô>ø>ü> ???????? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|????????? ?¤?¨?¬?°?´?¸?¼?À?Ä?È?Ì?Ð?Ô?Ø?Ü?à?ä?è?ì?ð?ô?ø?ü?                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            MZ       ÿÿ  ¸       @                                   Ø   º ´	Í!¸LÍ!This program cannot be run in DOS mode.
$               ÖÞäóäóäóaäófäówäógäóbäóRichäó                PE  L p^Ue        à !	     î                   o[      
   
               øb  @                     ¤            À  0                   Ð  ðL                                                                                .text   $                          `.data   <                        @  À.rsrc   0   À                     @  @.reloc  M   Ð   N   ¦              @  B                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              